@/*
	for active record model enhance
	provide pojo field, getter, setter
	for this you can do something like orm model, example:
	1.add annotation enhance field to adapt JSR303 validator or some other what you want do
	2.adapt other orm frame like mybatis
	3.for pojo not a map(active record stored data use map)
	4.more expansibility
@*/
package ${generate.package}.${generate.module_name}.model;

@ var need_datetime = false;
@ var need_decimal = false;
@ var need_list = false;
@ var need_oneToOne = false;
@ var need_oneToMany = false;
@ var need_manyToMany = false;
@ var need_manyToOne = false;
@ for (res in master) {
@   if(res.mapping_schema == "oneToMany") { need_manyToOne = true; }
@   if(res.mapping_schema == "ManyToMany") { need_manyToMany = true; }
@   if(res.mapping_schema == "oneToOne") { need_oneToOne = true; }
@ }
@ for (res in slaves) {
@   if(res.mapping_schema == "oneToMany") { need_oneToMany = true; }
@   if(res.mapping_schema == "ManyToMany") { need_manyToMany = true; }
@   if(res.mapping_schema == "oneToOne") { need_oneToOne = true; }
@ }
@ if(master.~size != 0) { need_list = true; }
@ if(slaves.~size != 0) { need_list = true; }
@ for(col in columns) {
@ 	if(col.type == "DATETIME") {
@		need_datetime = true;
@	} else if (col.type == "DECIMAL") {
@		need_decimal = true;
@	}
@ }
@ if(need_list) {
import java.util.List;

@ }
@/* if(need_datetime) {
import java.sql.Timestamp;

@ }*/
@ if(importNotNull) {
import javax.validation.constraints.NotNull;

@ }
@/* if(need_decimal) {
import java.math.BigDecimal;

@ }*/
import org.hacker.core.BaseModel;
import org.hacker.core.plugin.Table;
@ if(need_oneToOne || need_oneToMany || need_manyToOne || need_manyToMany) {

@ }
@ if(need_oneToOne) {
import javax.persistence.OneToOne;
@ }
@ if(need_oneToMany) {
import javax.persistence.OneToMany;
@ }
@ if(need_manyToOne) {
import javax.persistence.ManyToOne;
@ }
@ if(need_manyToMany) {
import javax.persistence.ManyToMany;
@ }
@ if (master.~size != 0 || slaves.~size != 0) {

@ }
@ for (res in master) {
import ${res.package}.${res.module_name}.model.${res.class_name};
@ }
@ for (res in slaves) {
import ${res.package}.${res.module_name}.model.${res.class_name};
@ }
@ if(importLength || importNotBlank) {

@ }
@ if(importLength) {
import org.hibernate.validator.constraints.Length;
@ }
@ if(importNotBlank) {
import org.hibernate.validator.constraints.NotBlank;
@ }

\@Table(tableName="${model.name}")
public class ${model.class_name} extends BaseModel<${model.class_name}> {
  public static final ${model.class_name} dao = new ${model.class_name}().dao();

@ for (res in master) {
@   if (res.mapping_schema == "oneToMany") {
  \@ManyToOne
  ${res.class_name} @print(firstCharToLowerCase(res.class_name));
;

@   } else if (res.mapping_schema == "oneToOne") {
  \@OneToOne
  ${res.class_name} @print(firstCharToLowerCase(res.class_name));
;

@   } else if (res.mapping_schema == "ManyToMany") {
  \@ManyToMany
  List<${res.class_name}> @print(firstCharToLowerCase(res.class_name));
s;

@   }
@ }
@ for (res in slaves) {
@   if (res.mapping_schema == "oneToMany") {
  \@OneToMany
  List<${res.class_name}> @print(firstCharToLowerCase(res.class_name));
s;

@   } else if (res.mapping_schema == "oneToOne") {
  \@OneToOne
  ${res.class_name} @print(firstCharToLowerCase(res.class_name));
;

@   } else if (res.mapping_schema == "ManyToMany") {
  \@ManyToMany
  List<${res.class_name}> @print(firstCharToLowerCase(res.class_name));
s;

@   }
@ }
@ for(col in columns) {
@ if(col.is_required && col.java_type == "java.lang.String" && col.name != "id") { println("  @NotBlank"); }
@ else if(col.is_required && col.java_type != "java.lang.String" && col.name != "id") { println("  @NotNull"); }
@ if(col.java_type == "java.lang.String") { println("  @Length(max = " + col.length + ")"); }
  public ${col.java_type} get@print(camelNameConvert(col.name));
() { return get("${col.name}"); }

@ }
@ for(col in columns) {
  public void set@print(camelNameConvert(col.name));
(${col.java_type} ${col.name}) { set("${col.name}", ${col.name}); }

@ }
@ for(res in master) {
@  var className = firstCharToLowerCase(res.class_name);
@   /* oneToMany */
@ 	if(res.mapping_schema == "oneToMany" || res.mapping_schema == "oneToOne") {
  public ${res.class_name} get${res.class_name}() { return ${className}; };

  public void set${res.class_name}(${res.class_name} ${className}) { this.${className} = ${className}; }

@	/* ManyToMany */
@	} else if(res.mapping_schema == "ManyToMany") {
  public List<${res.class_name}> get${res.class_name}() { return ${className}s; };

  public void set${res.class_name}(List<${res.class_name}> ${className}s) { this.${className}s = ${className}s; }

@	}
@ }
@ for(res in slaves) {
@  var className = firstCharToLowerCase(res.class_name);
@   /* oneToMany */
@   if(res.mapping_schema == "oneToOne") {
  public ${res.class_name} get${res.class_name}() { return ${className}; };

  public void set${res.class_name}(${res.class_name}> ${className}) { this.${className} = ${className}; }

@   /* ManyToMany */
@   } else if(res.mapping_schema == "ManyToMany" || res.mapping_schema == "oneToMany") {
  public List<${res.class_name}> get${res.class_name}() { return ${className}s; };

  public void set${res.class_name}(List<${res.class_name}> ${className}s) { this.${className}s = ${className}s; }

@   }
@ }
}
